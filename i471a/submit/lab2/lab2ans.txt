1.
a) ( + ( + ( - (* 3 (expt 3 4)) (* 2 (expt 4 2))) (+ 4 4)) (+ 1))
b) ( * 1000 (expt (+ 1 (/ .05 1)) 5))

2.
a) (car (cdr list2)) 
b) (cdr (cdr (cdr list2)))
c) (append (cdr (cdr list1)) (cdr (cdr (cdr list2))))

3.
a) (define (perimeter width height) (* 2 (+ width height)))
b1) (define (line-length x1 y1 x2 y2) (sqrt (+ (expt (- x1 x2) 2) (expt (- y1 y2) 2))))
b2)  (define (line-length '(x1 . x2) '(y1 . y2))) (sqrt (+ (expt (- x1 x2) 2) (expt (- y1 y2) 2)))

4.
a)
(define (sum aList)
  (if
      (null? aList)
          0
	  (+ (car aList) (sum (cdr aList)))
      )
  )
b)
(define (zip list1 list)
  (if
      (null? list1)
        error("break")
        (null? list2)
	  error("break")
	  (cons (car list1) (car list2) (zip (cdr list1) (cdr list2)))))



